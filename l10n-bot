#!/usr/bin/perl -w
#
# l10n-bot -- Parse emails on stdin for psuedo-urls used on debian-l10n-dutch@
# Copyright (C) 2003-2004 Tim Dijkstra
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# FUNCTION:
#  This program will parse emails on stdin for psuedo-urls in the subject used
#  on debian-l10n-dutch@l.d.o for coordination, If the subject starts with 
#  [(ITT|RFR|RFR2|LCFC|BTS|CLOSE)] it is further processed. This means that 
#  info found in this url is put in an MySQL database. In case where it starts 
#  with [(RFR|LCFC)] the last file that has an appropriate filename extension 
#  will be saved to disk.
#  See also pseudo-urls.html

use MIME::Parser;
use DBI;

#@stati=(ITT,RFR,RFR2,LCFC,SUBMIT,CLOSE);
# Define which filename is appropriate for wich type of translation
%exts=('po-debconf'=>'po','debian-installer'=>'po',po=>'po','man'=>'man','wml'=>'wml');

### Create parser, and set some parsing options:
my $parser = new MIME::Parser;
my $dir = "/var/www/www.famdijkstra.org/debian/l10n";
$parser->output_dir("/tmp");

### Parse input:
$entity = $parser->parse(\*STDIN) or die "parse failed\n";
$head = $entity->head;



if( !( $head->get('Subject') =~ /^\[(ITT|RFR|RFR2|LCFC|BTS#\d+|CLOSE)\]\s*(po-debconf|debian-installer|po|man|wml):\/\/([^\s]*)\s/ ) ){
    $parser->filer->purge(); exit;
}

$status = $1;
$type = $2;
$name = $3;
$date = Date::Format::time2str "%Y%m%d%H%M%S", Date::Parse::str2time($head->get('Date'));

# Cut out e-mail adres, trim name
$translator = $head->get('From');
$translator =~ s/\s<[^>]*>\s//;
$translator =~ s/^\s*([^\s]*)\s*$/$1/;
$file=0;
$bugnr=0;

# Extract bugnr, chop it of 
if( $status =~ /BTS/ ){
    $status =~ /^(BTS)#(\d+)$/;
    $status=$1;
    $bugnr=$2;
}

# In case of po-debconf, it can only be one per package, chop of filename
if( $type =~ /^po-debconf$/ ){
    $name =~ s/^(.*)\/[^\/]*$/$1/;
}
    
# Get filename
if( ($status =~ /(RFR|RFR2|LCFC)/) and ($entity->parts() > 0) ){
   @files=$entity->parts();
   for $i ( 0 .. $#files ) {
       if($files[$i]->bodyhandle and ($files[$i]->bodyhandle->path =~ /\.$exts{$type}$/ ) ){
	  $tmpfile=$files[$i]->bodyhandle->path;
	  $file=$exts{$type};
       }
   }
}

$dsn="DBI:mysql:database=debian;host=baardmijt;port=3306";
$link = DBI->connect($dsn, "USER","PASSWORD");

# If we have an ITT, we can have multiple packagename {php4,apache,mysql}
($status =~ /^ITT$/) and ($name =~ s/{([^}]*)}/$1/);

for $tmpname (split(',',$name)){
    $link->do("INSERT INTO translation VALUES(null,'$date','$tmpname','$status','$type','$translator','$file','$bugnr')");
    $insertid = $link->{'mysql_insertid'};
    if($file){
	use File::Copy;
	$newfile="$dir/$insertid.$exts{$type}";
	copy($tmpfile,$newfile);
    }
}

$link->disconnect();

$parser->filer->purge();
