#!/usr/bin/python2.5
# -*- coding: utf-8 -*-
#
# l10n -- frontend for the l10n-bot
#
# Copyright © 2007 Jordà Polo
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

import cgi, datetime, kid
# python2.4
#from pysqlite2 import dbapi2 as sqlite3
# python2.5
import sqlite3

team = 'ca'

basedir = '/srv/%s.debian.net' % team
database = '%s/data/%s.db' % (basedir, team)
template = '%s/data/%s.kid' % (basedir, team)

query = cgi.FieldStorage()

db = sqlite3.connect(database)
cursor = db.cursor()

def fetch_categories(sql, params):
	cursor.execute(sql, params)
	categories = {}
	for row in cursor:
		translation = {
			'id'       : row[0],
			'name'     : row[1],
			'author'   : row[2],
			'date'     : row[3],
			'category' : row[4],
			'type'     : row[5],
			'file'     : row[7],
			'bugnum'   : row[8],
		}
		cat = row[4]
		if cat not in categories:
			categories[cat] = []
		categories[cat].append(translation)
	return categories

# Default view.
sql = '''SELECT * FROM translations WHERE
         (type != "DONE" AND status == "open") OR
         (type == "DONE" AND date > ?)'''
expire = datetime.datetime.now() + datetime.timedelta(days=-7)
params = (expire.strftime("%Y-%m-%d %H:%M:%S"),)
view = { 'default' : 'true' }

# Translator view.
if query.has_key('translator'):
	translator = query['translator'].value
	sql = '''SELECT * FROM translations WHERE translator == ? GROUP BY name'''
	params = (translator,)
	view = { 'translator' : translator.decode('utf-8') }

# History view.
if query.has_key('history'):
	history = query['history'].value
	sql = '''SELECT * FROM translations WHERE name == ?'''
	params = (history,)
	view = { 'history' : history.decode('utf-8') }

categories = fetch_categories(sql, params)

cursor.close()
db.close()

html = kid.Template(file=template, view=view, categories=categories)
print 'Content-type: text/html; charset=utf-8\n'
print html.serialize(output='xhtml-strict')

