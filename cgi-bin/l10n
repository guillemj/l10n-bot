#!/usr/bin/perl
#
# l10n -- frontend for the l10n-bot
#
# Copyright © 2007 Jordà Polo
# Copyright © 2015 Guillem Jover <guillem@hadrons.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

use strict;
use warnings;

use Time::Seconds;
use Time::Piece;
use Encode qw(decode encode);
use CGI::Simple qw(-croak);
use DBI;
use Petal;
use Petal::Cache::Disk;

my $team = 'ca';

my $basedir = "/srv/$team.debian.net";
my $tempdir = "$basedir/cache";
my $datadir = "$basedir/data";
my $database = "$team.db";
my $template = "$team.tal";

# Set a local cache directory.
$Petal::Cache::Disk::TMP_DIR = $tempdir;

# Harden the CGI (the CGI::Simple defaults are pretty safe already).
$CGI::Simple::POST_MAX = 1024 * 10;
$CGI::Simple::DISABLE_UPLOADS = 1;

my $cgi = CGI::Simple->new;
$cgi->charset('UTF-8');

my $db = DBI->connect("DBI:SQLite:dbname=$datadir/$database");

sub fetch_categories {
    my ($query, @params) = @_;

    $query->execute(@params);

    my $categories;
    while (my $trans = $query->fetchrow_hashref()) {
        my $cat = $trans->{category};

        $trans->{translator} = decode('UTF-8', $trans->{translator});
        if ($trans->{type} eq 'BTS') {
            $trans->{type_is_bts} = 1;
        }
        if (not exists $categories->{$cat}) {
            $categories->{$cat} = {
                name => $cat,
                list => [],
            };
        }
        push @{$categories->{$cat}->{list}}, $trans;
    }
    return [ sort { $a->{name} cmp $b->{name} } values %{$categories} ];
}

# Default view.
my $sql = 'SELECT * FROM translations
           WHERE (type != "DONE" AND status = "open") OR
                 (type == "DONE" AND date > ?)';
my $expire = localtime;
$expire -= ONE_WEEK;
my @params = ($expire->strftime('%Y-%m-%d %H:%M:%S'));
my $view = { default => 1 };

# Translator view.
if ($cgi->param('translator')) {
    $sql = 'SELECT * FROM translations WHERE translator = ? GROUP BY name';
    my $translator = $cgi->param('translator');
    @params = ($translator);
    $view = { translator => $translator };
}

# History view.
if ($cgi->param('history')) {
    $sql = 'SELECT * FROM translations WHERE name = ?';
    my $history = $cgi->param('history');
    @params = ($history);
    $view = { history => $history };
}

my $query = $db->prepare($sql);
my $categories = fetch_categories($query, @params);

$db->disconnect();

my $html = Petal->new(base_dir => $datadir, file => $template,
                      disk_cache => 1, memory_cache => 0,
                      decode_charset => 'UTF-8',
                      input => 'XML', output => 'XHTML');

print $cgi->header(
    -type => 'text/html',
    -charset => 'UTF-8',
);

print encode('UTF-8', $html->process(
    view => $view,
    categories => $categories,
));

1;
