#!/usr/bin/perl
#
# l10n-bot -- Parse emails on stdin for psuedo-urls used on debian-l10n-*@
#
# Copyright © 2003-2004 Tim Dijkstra
# Copyrigth © 2004 Guillem Jover
# Copyright © 2007 Jordà Polo
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# FUNCTION:
#  This program will parse emails on stdin for psuedo-urls in the subject used
#  on debian-l10n-*@l.d.o for coordination, If the subject starts with
#  [(ITT|RFR|RFR2|LCFC|BTS|DONE)] it is further processed. This means that
#  info found in this url is put in an SQLite database. In case where it starts
#  with [(RFR|LCFC)] the last file that has an appropriate filename extension
#  will be saved to disk.
#  See also pseudo-urls.html

use warnings;

use Text::Iconv;
use MIME::Parser;
use MIME::WordDecoder;
use DBI;

my $team = "ca";

my $basedir = "/srv/ca.debian.net";
my $tmpdir = "$basedir/tmp/$$";
my $dir = "$basedir/www";

my $db_file = $basedir . "/data/$team.db";

sub cvt_utf8
{
  my ($data, $charset, $decoder) = @_ ;

  if ($data) {
    my $converter = Text::Iconv->new($charset, "UTF-8");
    return $converter->convert($data);
  } else {
    return "";
  }
}

# Recursive routine for finding the entity filenames.
sub get_entity_filenames {
  my ($entity) = @_;
  my @files;
  my @parts = $entity->parts;

  if (@parts) {                     # multipart...
    foreach $part (@parts) {
      push @files, get_entity_filenames($part);
    }
  } else {                          # single part...
    if ($entity->bodyhandle) {
      return ($entity->bodyhandle->path);
    } else {
      return ();
    }
  }

  return @files;
}

#@stati=(ITT,RFR,RFR2,LCFC,BTS#NNN,DONE);
# Define which filename is appropriate for wich type of translation
%exts=('po-debconf' => 'po',
       'debian-installer' => 'po',
       'po' => 'po',
       'man' => '(man|pod|[0-9])',
       'manual' => '(sgml|xml|html|diff|patch|txt)',
       'wml' => 'wml');

if (! -d $tmpdir) {
  mkdir $tmpdir;
}

### Create parser, and set some parsing options:
my $parser = new MIME::Parser;
$parser->output_dir($tmpdir);

### Parse input:
$entity = $parser->parse(\*STDIN) or die "parse failed\n";
$head = $entity->head;

$subject = $head->get('Subject');
$subject =~ s/\n\s*//g;

if (!($subject =~ /^\[(ITT|RFR|RFR2|LCFC|BTS#\d+|DONE)\]\s*(po-debconf|debian-installer|po|man|manual|wml):\/\/([^\s]*)/)) {
    $parser->filer->purge();
    rmdir $tmpdir;
    exit;
}

$status = $1;
$type = $2;
$name = $3;
$date = Date::Format::time2str "%Y-%m-%d %H:%M:%S", Date::Parse::str2time($head->get('Date'));

# Create a word quoted-printable converter
my $wd = new MIME::WordDecoder;
$wd->handler('UTF-8' => "KEEP", 'US-ASCII' => "KEEP", 'raw' => "KEEP",
	     '*' => \&cvt_utf8);

# Cut out e-mail address, trim name
$translator = $wd->decode($head->get('From'));
$translator =~ s/\s<[^>]*>\s//;
$translator =~ s/^\s*([^\s]*)\s*$/$1/;

my $tmpfile = 0;
my $bugnr = 0;
my $ext = 0;

# Extract bugnr, chop it of
if ($status =~ /BTS/) {
    $status =~ /^(BTS)#(\d+)$/;
    $status = $1;
    $bugnr = $2;
}

# In case of po-debconf, it can only be one per package, chop of filename
if ($type =~ /^po-debconf$/) {
    $name =~ s/^(.*)\/[^\/]*$/$1/;
}

# Get filename
if (($status =~ /(RFR|RFR2|LCFC)/) and ($entity->parts() > 0)) {
   my @filenames = get_entity_filenames($entity);

   for $path (@filenames) {
       # Decompress
       if ($path =~ /.gz$/) {
          system("gunzip", "$path");
          $path =~ s/.gz$//;
       } elsif ($path =~ /.bz2$/) {
          system("bunzip2", "$path");
          $path =~ s/.bz2$//;
       }

       if ($path =~ /\.($exts{$type})$/) {
	  $tmpfile = $path;
	  $ext = $1;
       }
   }
}

$dsn = "DBI:SQLite:dbname=$db_file";
$link = DBI->connect($dsn);

# If we have an ITT, we can have multiple packagename {php4,apache,mysql}
($status =~ /^ITT$/) and ($name =~ s/{([^}]*)}/$1/);

for $tmpname (split(',',$name)){
    $link->do("UPDATE translations SET status = 'closed' \
               WHERE name == '$tmpname'");
    $link->do("INSERT INTO translations VALUES (null, '$tmpname', \
               '$translator', '$date', '$type', '$status', 'open', '$ext', \
               '$bugnr')");
    $insertid = $link->last_insert_id(undef, undef, undef, undef);
    if ($tmpfile) {
	use File::Copy;
	$newfile = "$dir/$team/$insertid.$ext";
	copy($tmpfile, $newfile);
    }
}

# Clean

$link->disconnect();
$parser->filer->purge();
rmdir $tmpdir;

1;

