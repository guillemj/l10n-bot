#!/usr/bin/perl
#
# l10n-closebugs -- Query debian BTS if bugs marked as open are closed.
#
# Copyright © 2003-2004 Tim Dijkstra
# Copyright © 2004-2005, 2007-2008, 2010-2011 Guillem Jover
# Copyright © 2007 Jordà Polo
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# FUNCTION:
#  This program will query the debian BTS for records which are marked is open
#  in our db to check if they are closed. It will also correct the date of
#  an open bug to match it what the BTS says.
#

use strict;
use warnings;

use DBI;
use SOAP::Lite;
use Date::Parse;
use Date::Format;

my $team = "ca";

my $bts_uri = "http://bugs.debian.org/cgi-bin/soap.cgi";

my $basedir = "/srv/$team.debian.net";
my $db_file = $basedir . "/data/$team.db";

my $verbose = 0;

# Setup SOAP

print " -> setup soap\n" if $verbose;
my $soap = SOAP::Lite->uri('Debbugs/SOAP')->proxy($bts_uri) or
	die "soap init: $@";

# Setup SQL

print " -> setup sql\n" if $verbose;
my $dsn = "DBI:SQLite:dbname=$db_file";
my $link = DBI->connect($dsn);

# Get all records with type BTS

print " -> query sql: prepare\n" if $verbose;
my $query = $link->prepare("\
		SELECT id, bugnr, name, translator, category, date \
		FROM translations \
		WHERE type = 'BTS' AND status = 'open'");

print " -> query sql: execute\n" if $verbose;
$query->execute();

print " -> query soap: loop\n" if $verbose;
my @bug_list;
while (my $row = $query->fetchrow_hashref()) {
  print " adding id $row->{'bugnr'} to the soap query\n" if $verbose;
  push @bug_list, $row->{'bugnr'};
}

print " -> query soap: execute\n" if $verbose;
my $bugs = $soap->get_status(@bug_list)->result;

print " -> query sql: execute\n" if $verbose;
$query->execute();

print " -> query sql: loop\n" if $verbose;
while (my $row = $query->fetchrow_hashref()) {
  my $sql_time;
  my $bug_id = $row->{'bugnr'};
  my $bug_entry = $bugs->{$bug_id};
  my $bug_time;
  my $bug_done;
  my $bug_state;

  print "$bug_id $row->{'name'} $row->{'category'}\n" if $verbose;

  if ($bug_entry) {
    $sql_time = "'NOW'";
    $bug_time = $bug_entry->{date};
    $bug_done = $bug_entry->{done};
    $bug_state = $bug_entry->{pending};
  } else {
    # If we don't get any entry from SOAP we assume this was an invalid bug
    # report, so we mark it as closed and set its time to before the archival
    # data, to not clutter the output reports.
    print " bug unknown; closing\n" if $verbose;
    $sql_time = "'NOW', '-28 days'";
    $bug_time = time() - 28 * 24 * 60 * 60;
    $bug_done = 1;
    $bug_state = 'done';
  }
  my $bug_date = Date::Format::time2str("%Y-%m-%d %H\:%M\:%S", $bug_time);

  print " bug state '$bug_state'; done? '$bug_done'\n" if $verbose;

  # If it doesn't match with what we have in db, change it
  if ($bug_date !~ /^$row->{'date'}$/) {
    print " udapting date ($bug_date)\n" if $verbose;
    $link->do("UPDATE translations SET date='$bug_date' WHERE id='$row->{'id'}'");
  }

  # If bug is done, create a new record in db to show this
  if ($bug_done) {
    print " marking as closed\n" if $verbose;
    $link->do("UPDATE translations SET status='closed' \
               WHERE id='$row->{'id'}'");
    print " adding done entry\n" if $verbose;
    $link->do("INSERT INTO translations VALUES (null, '$row->{'name'}', \
               '$row->{'translator'}', DATETIME($sql_time), '$row->{'category'}', \
               'DONE', 'closed', null, '$bug_id')");
  }
}

print " -> done\n" if $verbose;

$query->finish();
undef $query;
print " -> query sql: finish\n" if $verbose;

$link->disconnect();
print " -> finish\n" if $verbose;

1;
