#!/usr/bin/perl -w
#
# l10n-closebugs -- Query debian BTS if bugs marked as open are closed.
#
# Copyright (C) 2003-2004 Tim Dijkstra
# Copyright (C) 2004-2005, 2007 Guillem Jover
# Copyright (C) 2007 JordÃ  Polo
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# FUNCTION:
#  This program will query the debian BTS for records which are marked is open
#  in our db to check if they are closed. It will also correct the date of
#  an open bug to match it what the BTS says.
#

use strict;
use DBI;
use Net::LDAP;
use Date::Parse;
use Date::Format;

my $team = "ca";

my $bts_host = "bts2ldap.debian.net";
my $bts_port = 10101;
my $bts_dn = "dc=current,dc=bugs,dc=debian,dc=org";

my $basedir = "/srv/$team.debian.net";
my $db_file = $basedir . "/data/$team.db";

my $verbose = 0;

# Setup LDAP

print " -> setup ldap\n" if $verbose;
my $ldap = Net::LDAP->new($bts_host,
			  'port' => "$bts_port",
			  'onerror' => 'die') or die "ldap init";
$ldap->bind("", 'version' => 3, 'noauth' => 1) or die "ldap bind";

# Setup SQL

print " -> setup sql\n" if $verbose;
my $dsn = "DBI:SQLite:dbname=$db_file";
my $link = DBI->connect($dsn);

# Get all records with type BTS

print " -> query sql: prepare\n" if $verbose;
my $query = $link->prepare("\
		SELECT id, bugnr, name, translator, category, date \
		FROM translations \
		WHERE type = 'BTS' AND status = 'open'");
my $query_done;

print " -> query sql: execute\n" if $verbose;
$query->execute();

print " -> query sql: loop\n" if $verbose;
while (my $row = $query->fetchrow_hashref()) {
  print "$row->{'bugnr'} $row->{'name'} $row->{'category'}\n" if $verbose;

  # Get BR from bts2ldap

  my $result = $ldap->search(base => "$bts_dn",
			     filter => "(debbugsID=$row->{'bugnr'})",
			     attrs => ['debbugsState', 'debbugsDate']) or
	       die "ldap search";

  my @entries = $result->entries;
  my $entry = $entries[0];
  my $bug_date = Date::Format::time2str("%Y-%m-%d %H\:%M\:%S",
					 $entry->get_value('debbugsDate'));
  my $bug_state = $entry->get_value('debbugsState');
  print " $bug_state\n" if $verbose;

  # If it doesn't match with what we have in db, change it.
  if ($bug_date !~ /^$row->{'date'}$/) {
    $link->do("UPDATE translations SET date='$bug_date' WHERE id='$row->{'id'}'");
  }

  # If bug is done, create a new record in db to show this
  if ($bug_state =~ /^done$/) {
    $link->do("UPDATE translations SET status='closed' \
               WHERE id='$row->{'id'}'");
    $link->do("INSERT INTO translations VALUES (null, '$row->{'name'}', \
               '$row->{'translator'}', DATETIME('NOW'), '$row->{'category'}', \
               'DONE', 'closed', null, '$row->{'bugnr'}')");
  }
}

print " -> finish\n" if $verbose;

$query->finish();
$query_done->finish();
$link->disconnect();

